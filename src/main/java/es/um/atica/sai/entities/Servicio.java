package es.um.atica.sai.entities;
// Generated 24-jun-2009 10:06:20 by Hibernate Tools 3.2.2.GA

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import org.hibernate.validator.constraints.Length;

/**
 * Servicio generated by hbm2java
 */
@Entity
@SequenceGenerator(name="SEQ_SERVICIO",sequenceName="SAI_SERVICIO",initialValue=0,allocationSize=1)
@Table(name = "SERVICIO")
@NamedQueries ( {
    @NamedQuery(name = Servicio.GET_SERVICIOS, query = "SELECT serv FROM Servicio serv ORDER BY serv.nombre ASC" ),
    @NamedQuery(name = Servicio.GET_SERVICIOS_CON_EMAIL, query = "SELECT serv FROM Servicio serv WHERE serv.email IS NOT NULL AND length(serv.email) > 1 ORDER BY serv.nombre ASC"),
    @NamedQuery(name = Servicio.GET_SERVICIOS_ES_SUPERVISOR, query = "SELECT up.servicio FROM UsuarioPerfil up WHERE up.usuario=:usuario AND up.usuario.acepta='SI' AND (up.usuario.caduca IS NULL OR up.usuario.caduca>:fechaactual) AND up.perfil.tag='SUPERVISOR'"),
    @NamedQuery(name = Servicio.GET_SERVICIOS_ES_IR, query = "SELECT up.servicio FROM UsuarioPerfil up WHERE up.usuario=:usuario AND up.usuario.acepta='SI' AND (up.usuario.caduca IS NULL OR up.usuario.caduca>:fechaactual) AND up.perfil.tag='IR' AND up.pendienteValidarIr='NO'"),
    @NamedQuery(name = Servicio.GET_SERVICIOS_ES_IR_CON_MIEMBROS, query = "SELECT up.servicio FROM UsuarioPerfil up WHERE up.usuario=:usuario AND up.usuario.acepta='SI' AND (up.usuario.caduca IS NULL OR up.usuario.caduca>:fechaactual) AND up.perfil.tag='IR' AND up.pendienteValidarIr='NO' AND EXISTS (SELECT up2 FROM UsuarioPerfil up2 WHERE up2.usuarioIrResponsable=up.usuario AND up2.usuario.acepta='SI' AND (up2.usuario.caduca IS NULL OR up2.usuario.caduca>:fechaactual) AND up2.perfil.tag='MIEMBRO' AND up2.servicio=up.servicio)"),
    @NamedQuery(name = Servicio.GET_SERVICIOS_ES_MIEMBRO, query = "SELECT up.servicio FROM UsuarioPerfil up WHERE up.usuario=:usuario AND up.usuario.acepta='SI' AND (up.usuario.caduca IS NULL OR up.usuario.caduca>:fechaactual) AND up.perfil.tag='MIEMBRO'"),
    @NamedQuery(name = Servicio.GET_SERVICIOS_ES_TECNICO, query = "SELECT up.servicio FROM UsuarioPerfil up WHERE up.usuario=:usuario AND up.usuario.acepta='SI' AND (up.usuario.caduca IS NULL OR up.usuario.caduca>:fechaactual) AND up.perfil.tag='TECNICO'"),
    @NamedQuery(name = Servicio.GET_SERVICIOS_ES_TECNICO_CON_VISIBILIDAD_SOLICITUDES, query = "SELECT up.servicio FROM UsuarioPerfil up WHERE up.usuario=:usuario AND up.usuario.acepta='SI' AND up.servicio.solicitudVisible='SI' AND (up.usuario.caduca IS NULL OR up.usuario.caduca>:fechaactual) AND up.perfil.tag='TECNICO'"),
    @NamedQuery(name = Servicio.GET_SERVICIOS_ES_TECNICO_SIN_VISIBILIDAD_SOLICITUDES, query = "SELECT up.servicio FROM UsuarioPerfil up WHERE up.usuario=:usuario AND up.usuario.acepta='SI' AND up.servicio.solicitudVisible='NO' AND (up.usuario.caduca IS NULL OR up.usuario.caduca>:fechaactual) AND up.perfil.tag='TECNICO'"),

})

public class Servicio implements java.io.Serializable, Comparable<Servicio> {

    public static final String GET_SERVICIOS = "SERVICIO.GET_SERVICIOS";
    public static final String GET_SERVICIOS_CON_EMAIL = "SERVICIO.GET_SERVICIOS_CON_EMAIL";
    public static final String GET_SERVICIOS_ES_SUPERVISOR = "SERVICIO.GET_SERVICIOS_ES_SUPERVISOR";
    public static final String GET_SERVICIOS_ES_IR = "SERVICIO.GET_SERVICIOS_ES_IR";
    public static final String GET_SERVICIOS_ES_MIEMBRO = "SERVICIO.GET_SERVICIOS_ES_MIEMBRO";
    public static final String GET_SERVICIOS_ES_IR_CON_MIEMBROS = "SERVICIO.GET_SERVICIOS_ES_IR_CON_MIEMBROS";
    public static final String GET_SERVICIOS_ES_TECNICO = "SERVICIO.GET_SERVICIOS_ES_TECNICO";
    public static final String GET_SERVICIOS_ES_TECNICO_CON_VISIBILIDAD_SOLICITUDES = "SERVICIO.GET_SERVICIOS_ES_TECNICO_CON_VISIBILIDAD_SOLICITUDES";
    public static final String GET_SERVICIOS_ES_TECNICO_SIN_VISIBILIDAD_SOLICITUDES = "SERVICIO.GET_SERVICIOS_ES_TECNICO_SIN_VISIBILIDAD_SOLICITUDES";
    
    private static final long serialVersionUID = -8529553405138182913L;
    
    private Long cod;
	private String nombre;
    private String abreviatura;
    private String email;
    private String solicitudVisible;
    
	private List<Nivel1> nivel1s = new ArrayList<>(0);
	private List<TipoReservable> tiposReservable = new ArrayList<>(0);
	private List<Producto> productos = new ArrayList<>(0);
	private List<Factura> facturas = new ArrayList<>(0);
	private List<TipoHorario> tiposHorario = new ArrayList<>(0);
	private List<UsuarioPerfil> usuariosPerfil = new ArrayList<>(0);
	private List<ServicioPuertakron> serviciosPuertakron = new ArrayList<>(0);

	public Servicio() {
	}

    @Id
    @GeneratedValue(strategy=GenerationType.SEQUENCE, generator="SEQ_SERVICIO")
    @Column(name = "COD", nullable = false, precision = 19, scale = 0)
	public Long getCod() {
		return cod;
	}
	
	public void setCod( Long cod ) {
		this.cod = cod;
	}

    @Column(name = "NOMBRE", nullable = false, length = 40)
    @Length(max = 40)
	public String getNombre() {
		return nombre;
	}

	public void setNombre( String nombre ) {
		this.nombre = nombre;
	}

    @Column(name = "ABREVIATURA", nullable = true, length = 5)
    @Length(max = 5)
	public String getAbreviatura() {
		return abreviatura;
	}
	
	public void setAbreviatura( String abreviatura ) {
		this.abreviatura = abreviatura;
	}

    @Column(name = "EMAIL", nullable = true, length = 100)
    @Length(max = 100)
	public String getEmail() {
		return email;
	}
	
	public void setEmail( String email ) {
		this.email = email;
	}

	@Column(name = "SOLICITUD_VISIBLE", nullable = false, length = 2)
	public String getSolicitudVisible() {
		return solicitudVisible;
	}
	
	public void setSolicitudVisible( String solicitudVisible ) {
		this.solicitudVisible = solicitudVisible;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "servicio")
	public List<Nivel1> getNivel1s() {
		return nivel1s;
	}
	
	public void setNivel1s( List<Nivel1> nivel1s ) {
		this.nivel1s = nivel1s;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "servicio")
	public List<TipoReservable> getTiposReservable() {
		return tiposReservable;
	}
	
	public void setTiposReservable( List<TipoReservable> tiposReservable ) {
		this.tiposReservable = tiposReservable;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "servicio")
	public List<Producto> getProductos() {
		return productos;
	}
	
	public void setProductos( List<Producto> productos ) {
		this.productos = productos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "servicio")
	public List<Factura> getFacturas() {
		return facturas;
	}

	public void setFacturas( List<Factura> facturas ) {
		this.facturas = facturas;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "servicio")
	public List<TipoHorario> getTiposHorario() {
		return tiposHorario;
	}
	
	public void setTiposHorario( List<TipoHorario> tiposHorario ) {
		this.tiposHorario = tiposHorario;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "servicio")
	public List<UsuarioPerfil> getUsuariosPerfil() {
		return usuariosPerfil;
	}
	
	public void setUsuariosPerfil( List<UsuarioPerfil> usuariosPerfil ) {
		this.usuariosPerfil = usuariosPerfil;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "servicio")
	public List<ServicioPuertakron> getServiciosPuertakron() {
		return serviciosPuertakron;
	}

	
	public void setServiciosPuertakron( List<ServicioPuertakron> serviciosPuertakron ) {
		this.serviciosPuertakron = serviciosPuertakron;
	}

	@Override
	public boolean equals(Object other) {
        // Codigo que comprueba si las dos entidades son iguales
        if ((this == other))
            return true;
        if ((other == null))
            return false;
        if (!(other instanceof Servicio))
            return false;
        Servicio castOther = (Servicio) other;
        return this.getNombre().equals(castOther.getNombre());
    }
    
    @Override
	public int hashCode() {
        int result = 17;

        result = 37 * result
                + (Integer.valueOf(this.getCod().toString()));
       
        return result;
    }
       
    @Override
	public int compareTo(Servicio servicio) {
        return this.getNombre().compareTo(servicio.getNombre());
    }
    
	@Override
	public String toString()
	{
		return String.valueOf(this.getCod());
	}


}

