package es.um.atica.sai.entities;
// Generated 24-jun-2009 10:06:20 by Hibernate Tools 3.2.2.GA

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;

import org.hibernate.validator.constraints.Length;

/**
 * Reservas generated by hbm2java
 */
@Entity
@Table(name = "RESERVAS")
@SequenceGenerator(name="SEQ_RESERVAS",sequenceName="SAI_RESERVAS",initialValue=0,allocationSize=1)
@NamedQueries ( {
    @NamedQuery(name = Reservas.GET_RESERVAS_X_TURNO, 
    			query = "SELECT res from Reservas res WHERE res.reservable=:reservable AND res.fechaFin>:fechainicio AND res.fechaInicio<:fechafin AND (res.estado='Aceptada' OR res.estado='Pendiente')"),
    @NamedQuery(name = Reservas.GET_RESERVAS_X_TURNO_BY_TIPORESERVABLE, 
				query = "SELECT res from Reservas res WHERE res.reservable.tipoReservable=:tiporeservable AND res.reservable.estado='ALTA' AND res.fechaFin>:fechainicio AND res.fechaInicio<:fechafin AND (res.estado='Aceptada' OR res.estado='Pendiente')"),
    @NamedQuery(name = Reservas.GET_RESERVAS_X_TURNO_TECNICO, 
    			query = "SELECT res FROM Reservas res WHERE res.consumo.usuarioTecnicoAsignado=:usuariotecnicoasignado AND res.fechaFinTecnico>:fechainicio AND res.fechaInicioTecnico<:fechafin AND (res.estado='Aceptada' OR res.estado='Pendiente')"),
    @NamedQuery(name = Reservas.GET_RESERVAS_X_TURNO_TECNICO_DISPONIBILIDAD_MOD, 
				query = "SELECT res FROM Reservas res WHERE res.consumo.usuarioTecnicoAsignado=:usuariotecnicoasignado AND res.cod<>:codreserva AND res.fechaFinTecnico>:fechainicio AND res.fechaInicioTecnico<:fechafin AND (res.estado='Aceptada' OR res.estado='Pendiente')"),
    @NamedQuery(name = Reservas.GET_RESERVAS_CONSUMO, 
    			query = "select res from Reservas res where res.consumo=:consumo ORDER BY res.fechaInicio, res.fechaFin"),
    @NamedQuery(name = Reservas.GET_RESERVAS_ACTIVAS_X_CONSUMO, 
				query = "SELECT res FROM Reservas res WHERE res.consumo=:consumo AND res.estado IN ('Aceptada','Pendiente') ORDER BY res.fechaInicio, res.fechaFin"),
})
public class Reservas implements java.io.Serializable {
    
	private static final long serialVersionUID = -1866929235715882820L;

	public static final String GET_RESERVAS_X_TURNO = "RESERVAS.GET_RESERVAS_X_TURNO";
    public static final String GET_RESERVAS_X_TURNO_BY_TIPORESERVABLE = "RESERVAS.GET_RESERVAS_X_TURNO_BY_TIPORESERVABLE";
    public static final String GET_RESERVAS_X_TURNO_TECNICO = "RESERVAS.GET_RESERVAS_X_TURNO_TECNICO";
    public static final String GET_RESERVAS_X_TURNO_TECNICO_DISPONIBILIDAD_MOD = "RESERVAS.GET_RESERVAS_X_TURNO_TECNICO_DISPONIBILIDAD_MOD";
    public static final String GET_RESERVAS_CONSUMO = "getReservasConsumo";
    public static final String GET_RESERVAS_ACTIVAS_X_CONSUMO = "RESERVAS.GET_RESERVAS_ACTIVAS_X_CONSUMO";
    
    
    public static final String ACEPTADA ="Aceptada";
    public static final String PENDIENTE = "Pendiente";
    public static final String ANULADA = "Anulada";
    
	private Long cod;
	private Equipo reservable;
	private Usuario usuario;
	private Date fechaInicio;
	private Date fechaFin;
	private Date fechaInicioTecnico;
	private Date fechaFinTecnico;
	private String tipo;
	private Consumo consumo;
	private String estado;
	private String confirmarAsistencia;

	public Reservas() {
	}

	public Reservas(Long cod, Equipo reservable, Usuario usuario,
			Date fechaFin, Date fechaInicio, String tipo) {
		this.cod = cod;
		this.reservable = reservable;
		this.usuario = usuario;
		this.fechaFin = fechaFin;
		this.fechaInicio = fechaInicio;
		this.tipo = tipo;
	}
	
	public Reservas(Equipo reservable,
					Usuario usuario,
					Date fechaFin,
					Date fechaInicio,
					String tipo,
					String estado,
					String confirmarAsistencia,
					Consumo consumo) {
		this(usuario,fechaFin,fechaInicio,tipo,estado,confirmarAsistencia,consumo);
		this.reservable = reservable;
	}

	public Reservas(
		Usuario usuario,
		Date fechaFin,
		Date fechaInicio,
		String tipo,
		String estado,
		String confirmarAsistencia,
		Consumo consumo) {
			this.usuario = usuario;
			this.fechaFin = fechaFin;
			this.fechaInicio = fechaInicio;
			this.tipo = tipo;
			this.estado=estado;
			this.confirmarAsistencia=confirmarAsistencia;
			this.consumo=consumo;
	}
	
	@Id
	@GeneratedValue(strategy=GenerationType.SEQUENCE, generator="SEQ_RESERVAS")
	@Column(name = "COD",  nullable = false, precision=19, scale = 0)
	public Long getCod() {
		return this.cod;
	}

	public void setCod(Long cod) {
		this.cod = cod;
	}
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "COD_RESERVABLE", nullable = false)
	@NotNull
	public Equipo getReservable() {
		return this.reservable;
	}

	public void setReservable(Equipo reservable) {
		this.reservable = reservable;
	}
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "COD_USUARIO", nullable = false)
	@NotNull
	public Usuario getUsuario() {
		return this.usuario;
	}

	public void setUsuario(Usuario usuario) {
		this.usuario = usuario;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "FECHA_INICIO", nullable = false, length = 7)
	public Date getFechaInicio() {
		return this.fechaInicio;
	}

	public void setFechaInicio(Date fechaInicio) {
		this.fechaInicio = fechaInicio;
	}
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "FECHA_FIN", nullable = false, length = 7)
	public Date getFechaFin() {
		return this.fechaFin;
	}

	public void setFechaFin(Date fechaFin) {
		this.fechaFin = fechaFin;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "FECHA_INICIO_TECNICO", nullable = false, length = 7)
	public Date getFechaInicioTecnico() {
		return fechaInicioTecnico;
	}

	public void setFechaInicioTecnico( Date fechaInicioTecnico ) {
		this.fechaInicioTecnico = fechaInicioTecnico;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "FECHA_FIN_TECNICO", nullable = false, length = 7)
	public Date getFechaFinTecnico() {
		return fechaFinTecnico;
	}

	
	public void setFechaFinTecnico( Date fechaFinTecnico ) {
		this.fechaFinTecnico = fechaFinTecnico;
	}

	@Column(name = "TIPO", nullable = false, length = 20)
	@NotNull
	@Length(max = 20)
	public String getTipo() {
		return this.tipo;
	}

	public void setTipo(String tipo) {
		this.tipo = tipo;
	}

	
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "COD_CONSUMO", nullable = false)
	@NotNull
	public Consumo getConsumo() {
		return consumo;
	}

	public void setConsumo(Consumo consumo) {
		this.consumo = consumo;
	}
	@Column(name = "ESTADO", nullable = false, length = 20)
	@NotNull
	public String getEstado() {
		return estado;
	}

	public void setEstado(String estado) {
		this.estado = estado;
	}
	
	@Column(name = "CONFIRMAR_ASISTENCIA", nullable = true, length = 10)
	@Length(max = 10)
	public String getConfirmarAsistencia() {
		return this.confirmarAsistencia;
	}

	public void setConfirmarAsistencia(String conf) {
		this.confirmarAsistencia=conf;
	}
	/*
	public Reservas clonar(boolean reserv){
		if (reserv) {
			Reservas r =  new Reservas(reservable, usuario,fechaFin,fechaInicio,tipo,estado,confirmarAsistencia,consumo);
			r.setCod( this.cod );
			return r;
		}else {
			return new Reservas(usuario,fechaFin,fechaInicio,tipo,estado,confirmarAsistencia,consumo);
		}
	}
	*/
	@Override
	public boolean equals(Object other) {
        // Codigo que comprueba si las dos entidades son iguales
        if ((this == other))
            return true;
        if ((other == null))
            return false;
        if (!(other instanceof Reservas))
            return false;
        Reservas castOther = (Reservas) other;
        try{
            if (this.reservable.getCod() == castOther.reservable.getCod() &&
                    this.fechaFin.compareTo(castOther.fechaFin)==0 &&
                    this.fechaInicio.compareTo(castOther.fechaInicio)==0 &&
                    this.tipo.equalsIgnoreCase( castOther.tipo))
                return true;
            
            return false;
        }catch(Exception e){
            return false;
        }
    }
    
    @Override
	public int hashCode() {        
        int result = 17;
        result = 37 * result + (Integer.valueOf(this.cod.toString()));   
        return result;
     }
	

}
